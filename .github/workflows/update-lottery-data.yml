name: Update Lottery Data NY API

on:
  schedule:
    # Runs every Wednesday and Saturday at 11:30 PM ET (3:30 AM UTC Thursday/Sunday)
    - cron: '30 3 * * 4,1'
  workflow_dispatch: # Allows manual trigger from GitHub UI
  push:
    paths:
      - 'fetch-ny-lottery-data.js'  # Also run when fetcher script is updated

env:
  TZ: America/New_York  # Set timezone to Eastern Time

jobs:
  update-lottery-data:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper git operations
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: |
        npm init -y
        npm install node-fetch
    
    - name: Verify lottery data file exists
      run: |
        if [ ! -f lottery-data.json ]; then
          echo "Creating initial lottery-data.json..."
          cat > lottery-data.json << 'EOF'
        {
          "last_updated": "2025-01-01T00:00:00Z",
          "results": [],
          "frequency": {
            "white": {},
            "red": {}
          },
          "source": "NY.gov Official API"
        }
        EOF
        fi
    
    - name: Fetch latest data from NY.gov API
      run: |
        echo "üé∞ Starting NY.gov Powerball data update..."
        echo "Current time: $(date)"
        echo "Timezone: $TZ"
        echo "API URL: https://data.ny.gov/api/views/d6yy-54nr/rows.json"
        node fetch-ny-lottery-data.js
      continue-on-error: false
    
    - name: Verify update results
      run: |
        echo "üìä Checking updated lottery data..."
        if [ -f lottery-data.json ]; then
          echo "‚úÖ lottery-data.json exists"
          echo "File size: $(wc -c < lottery-data.json) bytes"
          
          # Check if jq is available for JSON parsing
          if command -v jq &> /dev/null; then
            echo "Number of results: $(jq '.results | length' lottery-data.json 2>/dev/null || echo 'Could not parse JSON')"
            echo "Last updated: $(jq -r '.last_updated' lottery-data.json 2>/dev/null || echo 'Could not parse timestamp')"
            echo "Data source: $(jq -r '.source' lottery-data.json 2>/dev/null || echo 'Could not parse source')"
            
            # Show latest drawing info
            echo "Latest drawing date: $(jq -r '.results[0].date // "No data"' lottery-data.json 2>/dev/null)"
            echo "Latest white balls: $(jq -r '.results[0].white // [] | join(",")' lottery-data.json 2>/dev/null)"
            echo "Latest powerball: $(jq -r '.results[0].red // "N/A"' lottery-data.json 2>/dev/null)"
          else
            echo "‚ö†Ô∏è  jq not available, skipping detailed JSON analysis"
          fi
        else
          echo "‚ùå lottery-data.json missing!"
          exit 1
        fi
    
    - name: Check for changes
      id: check_changes
      run: |
        if git diff --quiet lottery-data.json; then
          echo "No changes detected in lottery-data.json"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected in lottery-data.json"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "üìà Changes preview:"
          git diff --stat lottery-data.json
        fi
    
    - name: Configure git
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
    
    - name: Commit and push changes
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "üìù Committing lottery data updates..."
        git add lottery-data.json
        
        # Extract latest drawing info for commit message (with fallbacks)
        if command -v jq &> /dev/null; then
          LATEST_DATE=$(jq -r '.results[0].date // "unknown"' lottery-data.json 2>/dev/null || echo "unknown")
          LATEST_NUMBERS=$(jq -r '.results[0].white // [] | join(",")' lottery-data.json 2>/dev/null || echo "unknown")
          LATEST_POWERBALL=$(jq -r '.results[0].red // "?"' lottery-data.json 2>/dev/null || echo "?")
          TOTAL_RESULTS=$(jq '.results | length' lottery-data.json 2>/dev/null || echo "0")
          DATA_SOURCE=$(jq -r '.source // "NY.gov API"' lottery-data.json 2>/dev/null || echo "NY.gov API")
        else
          LATEST_DATE="unknown"
          LATEST_NUMBERS="unknown"
          LATEST_POWERBALL="?"
          TOTAL_RESULTS="unknown"
          DATA_SOURCE="NY.gov API"
        fi
        
        COMMIT_MSG="üé∞ Auto-update: Powerball $LATEST_DATE [$LATEST_NUMBERS] PB:$LATEST_POWERBALL ($TOTAL_RESULTS total) - $DATA_SOURCE"
        
        git commit -m "$COMMIT_MSG"
        git push
        
        echo "‚úÖ Successfully pushed lottery data update"
        echo "üìä Commit message: $COMMIT_MSG"
    
    - name: Update summary
      if: always()
      run: |
        echo "## üé∞ NY.gov Powerball Data Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "**Data Source:** NY.gov Official API" >> $GITHUB_STEP_SUMMARY
        echo "**API URL:** https://data.ny.gov/api/views/d6yy-54nr/rows.json" >> $GITHUB_STEP_SUMMARY
        
        if [ -f lottery-data.json ] && command -v jq &> /dev/null; then
          TOTAL_RESULTS=$(jq '.results | length' lottery-data.json 2>/dev/null || echo "0")
          LAST_UPDATE=$(jq -r '.last_updated' lottery-data.json 2>/dev/null || echo "unknown")
          LATEST_DATE=$(jq -r '.results[0].date // "no data"' lottery-data.json 2>/dev/null)
          LATEST_NUMBERS=$(jq -r '.results[0].white // [] | join(", ")' lottery-data.json 2>/dev/null)
          LATEST_PB=$(jq -r '.results[0].red // "N/A"' lottery-data.json 2>/dev/null)
          
          echo "**Total Results:** $TOTAL_RESULTS" >> $GITHUB_STEP_SUMMARY
          echo "**Last Updated:** $LAST_UPDATE" >> $GITHUB_STEP_SUMMARY
          echo "**Latest Drawing:** $LATEST_DATE" >> $GITHUB_STEP_SUMMARY
          echo "**Latest Numbers:** [$LATEST_NUMBERS] PB: $LATEST_PB" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
            echo "**Changes:** ‚úÖ New data added and committed" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Changes:** ‚ÑπÔ∏è No new data (up to date)" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "**Error:** ‚ùå lottery-data.json not found or jq unavailable" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå NY.gov lottery data update failed!"
        echo "Check the logs above for details."
        echo "The app will continue using existing data until the next successful update."
        echo "API URL: https://data.ny.gov/api/views/d6yy-54nr/rows.json"
